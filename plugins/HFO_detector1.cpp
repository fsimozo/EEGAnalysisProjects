/* 
 * File:   HFO_detector1.cpp
 * Author: Fabricio
 * 
 * Created on 18 de Janeiro de 2013, 10:16
 */

#include "HFO_detector1.h"

#include <QtGui>
#include <QTime>

#include <math.h>
#include <stdlib.h>
#include <stdio.h>

QCheckBox *test = new QCheckBox("Testing?");

QStringList HFO_detector1::methods() const{
    return QStringList() <<tr("HFO Detection Artigo");
}

QString HFO_detector1::description() const{
    QString description = "Uses an algorithm involving time domain analysis to detect HFO";
    return description;
}

int HFO_detector1::numberofdata() const{
    int number = n_results;
    return number;
}

int* HFO_detector1::elementsonch() const{
    int* number = n_elements;
    return number;
}

QStringList HFO_detector1::name() const{
    QStringList name;
    name.append("Original signal");
    name.append("Broad Band signal (80-300 Hz)");
    name.append("HFO Detections in 80-118 Hz");
    name.append("HFO Detections in 122-178 Hz");
    name.append("HFO Detections in 182-238 Hz");
    name.append("HFO Detections in 242-298 Hz");
    name.append("Total HFO detections");
    return name;
}

QWidget* HFO_detector1::parameters() const{
    QWidget *page = new QWidget();
    QVBoxLayout *layout = new QVBoxLayout();
    layout->addWidget(test);
    page->setLayout(layout);
    return page;
}

double*** HFO_detector1::analysis(QVector<double> X, QVector<double> Y){
    double*** result;// = new QVector<>;
    
    srand ((QTime::currentTime().msec()+QTime::currentTime().second()*(QTime::currentTime().hour()+QTime::currentTime().minute())));
    
    double pi = 3.141592;
    //Testing:
    //A senoidal signal is created, and small intervals with high frequency
    //senois are added
    if(test->isChecked()){
        QVector<double> random;
        random.resize(Y.count());
        
        for(int i = 0; i<Y.count(); i++){
            random[i]=0*((double)rand()/(RAND_MAX));
        }
        
        for(int i = 0; i<Y.count(); i++){
            X[i]=i;
            Y[i]=100*sin(2*pi*10*0.001*i)+100*sin(2*pi*20*0.001*i) 
                    + 100*sin(2*pi*30*0.001*i)+100*sin(2*pi*40*0.001*i);
            
            int freq = 80;

            if(i>=10000 && i<=10050){
                Y[i]+=10*sin(2*pi*freq*0.001*i);
            }else if(i>=15000 && i<=15050){
                Y[i]+=10*sin(2*pi*(freq+2)*0.001*i);
            }else if(i>=20000 && i<=20050){
                Y[i]+=10*sin(2*pi*(freq+4)*0.001*i);
            }else if(i>=25000 && i<=25050){
                Y[i]+=10*sin(2*pi*(freq+6)*0.001*i);
            }else if(i>=30000 && i<=30050){
                Y[i]+=10*sin(2*pi*(freq+8)*0.001*i);
            }else if(i>=35000 && i<=35050){
                Y[i]+=10*sin(2*pi*(freq+10)*0.001*i);
            }else if(i>=40000 && i<=40050){
                Y[i]+=10*sin(2*pi*(freq+12)*0.001*i);
            }else if(i>=45000 && i<=45050){
                Y[i]+=10*sin(2*pi*(freq+14)*0.001*i);
            }else if(i>=50000 && i<=50050){
                Y[i]+=10*sin(2*pi*(freq+16)*0.001*i);
            }else if(i>=55000 && i<=55050){
                Y[i]+=10*sin(2*pi*(freq+18)*0.001*i);
            }else if(i>=60000 && i<=60050){
                Y[i]+=10*sin(2*pi*(freq+20)*0.001*i);
            }else if(i>=65000 && i<=65050){
                Y[i]+=10*sin(2*pi*(freq+22)*0.001*i);
            }else if(i>=70000 && i<=70050){
                Y[i]+=10*sin(2*pi*(freq+24)*0.001*i);
            }else if(i>=75000 && i<=75050){
                Y[i]+=10*sin(2*pi*(freq+26)*0.001*i);
            }else if(i>=80000 && i<=80050){
                Y[i]+=10*sin(2*pi*(freq+28)*0.001*i);
            }else if(i>=85000 && i<=85050){
                Y[i]+=10*sin(2*pi*(freq+30)*0.001*i);
            }else if(i>=90000 && i<=90050){
                Y[i]+=10*sin(2*pi*(freq+32)*0.001*i);
            }else if(i>=95000 && i<=95050){
                Y[i]+=10*sin(2*pi*(freq+34)*0.001*i);
            }else if(i>=100000 && i<=100050){
                Y[i]+=10*sin(2*pi*(freq+36)*0.001*i);
            }else if(i>=105000 && i<=105050){
                Y[i]+=10*sin(2*pi*(freq+38)*0.001*i);
            }else if(i>=110000 && i<=110050){
                Y[i]+=10*sin(2*pi*(freq+40)*0.001*i);
            }
            Y[i]+=random[i];
        }
//         Y.resize(100000);
//        int freq = 100;
//        int n_oscil = 341;
//        int interv = 100000/n_oscil;
//        for(int i=0; i<n_oscil; i++){
//            for(int j=0; j<50; j++){
//                Y[i*interv+j]+=10*sin(2*pi*(freq)*0.001*(i*interv+j));
//            }
//        }
    }
    //END TESTING
    
    //inicializes signals to be returned
    result = new double**[4];
    n_elements = new int[4];
    for(int i = 0; i<3; i++){
        //X and Y axis
        result[i] = new double*[2];
        //X axis - index 0
        result[i][0] = new double[X.count()];
        //Y axis - index 1
        result[i][1] = new double[X.count()];
        n_elements[i]=Y.count();
    }
    n_elements[3]=2;
    
    result[3] = new double*[2];
    result[3][0] = new double[2];
    result[3][1] = new double[2];
    
    n_results=0;

    //Step 1: Apply the necessary filters to the singal
    //Broad - Band signal
    int N = 401;
    int Tau = (N-1)/2;
    
    double F1 = 80;
    double F2 = 300;
    //double pi = 3.14159265;
    double wp1 = (F1*2*pi)/1000;
    double wp2= (F2*2*pi)/1000;
    
    QVector<double> filter;
    filter.resize(N);
    //Band-pass
    for(int i=0; i<N; i++){
        if (i == Tau)
            filter[i] = (wp2-wp1)/pi;
        else
            filter[i] = (sin((i - Tau)*wp2)-sin((i - Tau)*wp1))/(pi*(i-Tau));
    }
    //Generalized Hamming window
    double alpha = 0.54;
    for(int i=0; i<N; i++){
        filter[i]=filter[i]*(alpha-(1-alpha)*cos(2*pi*i/(N-1)));
    }
    //filters signal
    QVector<double> filtered;
    filtered.resize(Y.count());

    for(int i = N; i<Y.count(); i++){
        filtered[i-N]=0;
        for(int j = 0; j<filter.count(); j++){
            if((i-j)>=0){
                filtered[i-N]+=filter[j]*Y[i-j];
            }
        }
    }
    //Filters original signal with a band pass of 0-60, just for the final
    //view comparison - THIS RESULTING SIGNAL IS NOT USED ON THE METHOD ITSELF
    //low and high frequency cuttof
    F1 = 0;
    F2 = 60;
    //double pi = 3.14159265;
    wp1 = (F1*2*pi)/1000;
    wp2= (F2*2*pi)/1000;
    
    QVector<double> filter1;
    filter1.resize(N);
    //Band-pass
    for(int i=0; i<N; i++){
        if (i == Tau)
            filter1[i] = (wp2-wp1)/pi;
        else
            filter1[i] = (sin((i - Tau)*wp2)-sin((i - Tau)*wp1))/(pi*(i-Tau));
    }
    //Generalized Hamming window
    //double alpha = 0.54;
    for(int i=0; i<N; i++){
        filter1[i]=filter1[i]*(alpha-(1-alpha)*cos(2*pi*i/(N-1)));
    }
    //filters signal
    QVector<double> filtered1;
    filtered1.resize(Y.count());

    for(int i = N; i<Y.count(); i++){
        filtered1[i-N]=0;
        for(int j = 0; j<filter1.count(); j++){
            if((i-j)>=0){
                filtered1[i-N]+=filter1[j]*Y[i-j];
            }
        }
    }
    //Filters signal in 5 different frequency bands
    //80 - 120, 120 - 160, 160 - 200, 200 - 240, 240 - 300
    double F1_vec[] = {
        80
//        122,
//        182,
//        242   
    };
    double F2_vec[] = {
        118
//        178,
//        238,
//        298
    };
    
    int n_bands = 1;
    
    QVector< QVector <double> > filtered_bands;
    //QVector< QVector <double> > Bk;
    //QVector< QVector <double> > Z_k;
    QVector< QVector <double> > dk;
    filtered_bands.resize(n_bands);
    //Bk.resize(5);
    //Z_k.resize(5);
    dk.resize(n_bands);
    
    double sigma =0;
    
    
    for(int k = 0; k<n_bands; k++){
        //for each frequency band, do:
        filtered_bands[k].resize(Y.count());
        dk[k].resize(Y.count());
        
        wp1 = (F1_vec[k]*2*pi)/1000; //1000 = sample freq.
        wp2= (F2_vec[k]*2*pi)/1000;
        
        //Band-pass
        for(int i=0; i<N; i++){
            if (i == Tau)
                filter[i] = (wp2-wp1)/pi;
            else
                filter[i] = (sin((i - Tau)*wp2)-sin((i - Tau)*wp1))/(pi*(i-Tau));
        }
        //Generalized Hamming window
        double alpha = 0.54;
        for(int i=0; i<N; i++){
            filter[i]=filter[i]*(alpha-(1-alpha)*cos(2*pi*i/(N-1)));
        }
        
        //calculates sigma
        double sum1 = 0;
        double sum2 = 0;
        for(int i=0; i<N; i++){
            sum1 +=(pow(i,2)*pow(filter[i],2));
            sum2 +=(pow(filter[i],2));
        }
        sigma = sqrt(sum1/sum2);
        //printf("sigma = %f\n", sigma);
        //filters signal
        
            //filter1.resize(567);
            // <editor-fold defaultstate="collapsed" desc="filtro_parks">
//        static double filter1[567] = {
//            0.0001706067140866618,
//            -0.0034792758495768177,
//            0.0020659996014877747,
//            0.0012810575794213327,
//            0.0004221512756766677,
//            -0.00012898694383818137,
//            -0.0003654573793365161,
//            -0.00036254255699631483,
//            -0.00023145361324779893,
//            -0.00007996970716594466,
//            0.00001922185361879358,
//            0.00004335182192666706,
//            0.000014027952266070876,
//            -0.00002385968303622565,
//            -0.00002875450783071476,
//            0.00001618351083033616,
//            0.00009614920165594607,
//            0.00017261792609819324,
//            0.0002021299247703393,
//            0.0001573310048911618,
//            0.00004092759104733265,
//            -0.00011247426954022668,
//            -0.0002485547057649874,
//            -0.00031412089318130673,
//            -0.0002791948650394581,
//            -0.0001496466604337355,
//            0.00003397321268575746,
//            0.00021134864891063747,
//            0.00032401668821481407,
//            0.0003358998729595603,
//            0.00024543256514645965,
//            0.00008556174789812694,
//            -0.00008925748593724338,
//            -0.00022389129765937687,
//            -0.0002822089432665181,
//            -0.00025680413968038555,
//            -0.00016773149887306768,
//            -0.00005183701979994594,
//            0.00005196156724933137,
//            0.00011847986350896068,
//            0.0001436128322417263,
//            0.00014024346928456796,
//            0.00012579301000881072,
//            0.00011233310405470648,
//            0.00010045737604001056,
//            0.00007683201947845456,
//            0.000023380824720684326,
//            -0.00006615601475404215,
//            -0.0001780282739689821,
//            -0.0002805819614645613,
//            -0.00032878427701042956,
//            -0.00028322383360896005,
//            -0.00013535387740428386,
//            0.00008942021117865239,
//            0.0003303898473400247,
//            0.0005035764764332631,
//            0.0005432379934728779,
//            0.0004125894823932648,
//            0.00013745939763979843,
//            -0.00020835389924708913,
//            -0.0005164591813888314,
//            -0.0006841431783946526,
//            -0.0006481176495440134,
//            -0.0004103307964427278,
//            -0.00004002007793247288,
//            0.0003477965804636901,
//            0.0006306635652729166,
//            0.0007203294521295929,
//            0.000592673988726387,
//            0.00029467680875443924,
//            -0.00007305833253835333,
//            -0.0003927256190271021,
//            -0.0005705625019665242,
//            -0.0005673346165428243,
//            -0.00040698920894111416,
//            -0.00016181324091414838,
//            0.00007872921156710085,
//            0.0002431153813814889,
//            0.00030202009987148056,
//            0.0002728733322721684,
//            0.00020336278055405315,
//            0.00014349483310272687,
//            0.00011919005696696207,
//            0.00011980987255970673,
//            0.00010517898215610903,
//            0.000030325144955778932,
//            -0.00012423154091086147,
//            -0.00033220710166389833,
//            -0.0005222552642551832,
//            -0.0006012581896684013,
//            -0.0004947603688851048,
//            -0.00018664871079828043,
//            0.0002597813205274284,
//            0.0007126136214554886,
//            0.0010099801504875516,
//            0.0010201344145137666,
//            0.0006966204118325681,
//            0.00010699843517431307,
//            -0.0005788585139393141,
//            -0.0011395192441272161,
//            -0.0013778103932618135,
//            -0.0011934897060061182,
//            -0.000623627284201034,
//            0.0001615545093905034,
//            0.00091323676189585,
//            0.0013890981881240065,
//            0.0014350461974589567,
//            0.0010408429902583319,
//            0.0003422529850008471,
//            -0.0004288197721409871,
//            -0.0010244224162697024,
//            -0.001269622410293214,
//            -0.0011162581419848913,
//            -0.0006540270735462815,
//            -0.00006592713688065847,
//            0.0004436461653756917,
//            0.0007267547019453327,
//            0.0007395571313473856,
//            0.0005456204181639188,
//            0.00027496817512132976,
//            0.00005881402846852399,
//            -0.00003071773973466897,
//            -0.000008831746756390828,
//            0.000037198036555715424,
//            1.3822287392501355e-7,
//            -0.00018298583002623382,
//            -0.0004852901808337252,
//            -0.0007869837883128509,
//            -0.0009197198884204166,
//            -0.0007433401231304142,
//            -0.00022238992280845446,
//            0.0005335011691642524,
//            0.001287623974282757,
//            0.001752404478642071,
//            0.001699083307324825,
//            0.00105910921599182,
//            -0.000026757510223180513,
//            -0.0012357587238414635,
//            -0.0021637538617319874,
//            -0.0024667261814993275,
//            -0.0019919023265108755,
//            -0.000846684387289647,
//            0.0006235872914491847,
//            0.0019461430370155855,
//            0.002682311030778653,
//            0.002582792841958248,
//            0.0016768106021425421,
//            0.00026541577015291764,
//            -0.0011857247608698855,
//            -0.0022087209062284572,
//            -0.0024974438088376,
//            -0.002006573777017951,
//            -0.0009560988627864729,
//            0.0002627433894540386,
//            0.0012391019024097277,
//            0.001690840848755636,
//            0.0015570990661126862,
//            0.0009963200578850073,
//            0.0002989313920534134,
//            -0.0002451817699909521,
//            -0.0004705004121502642,
//            -0.00039385613517151715,
//            -0.00018685087359959334,
//            -0.0000765909881856171,
//            -0.0002190843245672073,
//            -0.0006071982633349518,
//            -0.0010556999747668027,
//            -0.0012781925202740552,
//            -0.00102243880958648,
//            -0.0002109776394338537,
//            0.000983488742433437,
//            0.0021661619284405543,
//            0.0028532583713449023,
//            0.002664356519964914,
//            0.0014989681658840364,
//            -0.0003803317542647267,
//            -0.0024013162434537525,
//            -0.003864293966984424,
//            -0.00419338896165998,
//            -0.003164219378249876,
//            -0.0010163765454395287,
//            0.0015993987701012123,
//            0.003829884829699349,
//            0.0049138298900814805,
//            0.004456315337470072,
//            0.002579122648243223,
//            -0.00011166292123093645,
//            -0.002732986570015766,
//            -0.004433549995844089,
//            -0.004690632650537034,
//            -0.003485739728862571,
//            -0.0012947003202954947,
//            0.001100868124566296,
//            0.0029068645041419035,
//            0.003600906701625697,
//            0.00310070633313366,
//            0.0017559693039894335,
//            0.0001743483685732866,
//            -0.001041920814062311,
//            -0.001536331343541238,
//            -0.0013209096178241953,
//            -0.0007275070527940282,
//            -0.00022413558584298944,
//            -0.0001663322717020873,
//            -0.0006159002050881257,
//            -0.0012903117541670152,
//            -0.001693832957501667,
//            -0.0013606759938820478,
//            -0.00011233652996654092,
//            0.00178773936496567,
//            0.003675549163583795,
//            0.004716473409807539,
//            0.0042483746115725115,
//            0.002104359310389056,
//            -0.0012337236284530036,
//            -0.004730484996005717,
//            -0.007128324997224736,
//            -0.00740902787279173,
//            -0.005212734679627175,
//            -0.001042029621889346,
//            0.0038443623889268933,
//            0.007829041466074655,
//            0.009498684272778835,
//            0.008165361525856068,
//            0.0041489628534498455,
//            -0.0012961992542388306,
//            -0.006394949292672195,
//            -0.009465650490749386,
//            -0.009512424963322818,
//            -0.006575227133789471,
//            -0.0017056198133438844,
//            0.0034227187704170482,
//            0.0071232108277542935,
//            0.008296092897295233,
//            0.006793501022672129,
//            0.0034147745892010688,
//            -0.0004564733929813528,
//            -0.0034217958367218308,
//            -0.0046108920678785284,
//            -0.003981035271100968,
//            -0.0022552676398012155,
//            -0.0005336138682249937,
//            0.00025051929933372425,
//            -0.00021314880061986058,
//            -0.0014508859664282684,
//            -0.0024241760472900062,
//            -0.002048168748179244,
//            0.00021247585569990495,
//            0.003942115988774714,
//            0.0077780218742998525,
//            0.009870430569203498,
//            0.00865253539541429,
//            0.0036212064230059025,
//            -0.004209665486745886,
//            -0.012433353677957825,
//            -0.017963647555643013,
//            -0.018177205530638233,
//            -0.011980351174015887,
//            -0.0005422515392860587,
//            0.012886794201860069,
//            0.023834783492926802,
//            0.028119385204347112,
//            0.023422479248482106,
//            0.01031280803336004,
//            -0.007641661018977411,
//            -0.024821822904074357,
//            -0.03534638053514454,
//            -0.03510642838465381,
//            -0.023326030242467457,
//            -0.003075016405212054,
//            0.019510439315332383,
//            0.03711826990787876,
//            0.04367277578885968,
//            0.03645632305704527,
//            0.017188271665792648,
//            -0.00835723572963109,
//            -0.03211855838068604,
//            -0.0463471976325067,
//            -0.046185363155992934,
//            -0.03134935413191819,
//            -0.006326033765133965,
//            0.02101495713896541,
//            0.041955519147806236,
//            0.04977455833242245,
//            0.041955519147806236,
//            0.02101495713896541,
//            -0.006326033765133965,
//            -0.03134935413191819,
//            -0.046185363155992934,
//            -0.0463471976325067,
//            -0.03211855838068604,
//            -0.00835723572963109,
//            0.017188271665792648,
//            0.03645632305704527,
//            0.04367277578885968,
//            0.03711826990787876,
//            0.019510439315332383,
//            -0.003075016405212054,
//            -0.023326030242467457,
//            -0.03510642838465381,
//            -0.03534638053514454,
//            -0.024821822904074357,
//            -0.007641661018977411,
//            0.01031280803336004,
//            0.023422479248482106,
//            0.028119385204347112,
//            0.023834783492926802,
//            0.012886794201860069,
//            -0.0005422515392860587,
//            -0.011980351174015887,
//            -0.018177205530638233,
//            -0.017963647555643013,
//            -0.012433353677957825,
//            -0.004209665486745886,
//            0.0036212064230059025,
//            0.00865253539541429,
//            0.009870430569203498,
//            0.0077780218742998525,
//            0.003942115988774714,
//            0.00021247585569990495,
//            -0.002048168748179244,
//            -0.0024241760472900062,
//            -0.0014508859664282684,
//            -0.00021314880061986058,
//            0.00025051929933372425,
//            -0.0005336138682249937,
//            -0.0022552676398012155,
//            -0.003981035271100968,
//            -0.0046108920678785284,
//            -0.0034217958367218308,
//            -0.0004564733929813528,
//            0.0034147745892010688,
//            0.006793501022672129,
//            0.008296092897295233,
//            0.0071232108277542935,
//            0.0034227187704170482,
//            -0.0017056198133438844,
//            -0.006575227133789471,
//            -0.009512424963322818,
//            -0.009465650490749386,
//            -0.006394949292672195,
//            -0.0012961992542388306,
//            0.0041489628534498455,
//            0.008165361525856068,
//            0.009498684272778835,
//            0.007829041466074655,
//            0.0038443623889268933,
//            -0.001042029621889346,
//            -0.005212734679627175,
//            -0.00740902787279173,
//            -0.007128324997224736,
//            -0.004730484996005717,
//            -0.0012337236284530036,
//            0.002104359310389056,
//            0.0042483746115725115,
//            0.004716473409807539,
//            0.003675549163583795,
//            0.00178773936496567,
//            -0.00011233652996654092,
//            -0.0013606759938820478,
//            -0.001693832957501667,
//            -0.0012903117541670152,
//            -0.0006159002050881257,
//            -0.0001663322717020873,
//            -0.00022413558584298944,
//            -0.0007275070527940282,
//            -0.0013209096178241953,
//            -0.001536331343541238,
//            -0.001041920814062311,
//            0.0001743483685732866,
//            0.0017559693039894335,
//            0.00310070633313366,
//            0.003600906701625697,
//            0.0029068645041419035,
//            0.001100868124566296,
//            -0.0012947003202954947,
//            -0.003485739728862571,
//            -0.004690632650537034,
//            -0.004433549995844089,
//            -0.002732986570015766,
//            -0.00011166292123093645,
//            0.002579122648243223,
//            0.004456315337470072,
//            0.0049138298900814805,
//            0.003829884829699349,
//            0.0015993987701012123,
//            -0.0010163765454395287,
//            -0.003164219378249876,
//            -0.00419338896165998,
//            -0.003864293966984424,
//            -0.0024013162434537525,
//            -0.0003803317542647267,
//            0.0014989681658840364,
//            0.002664356519964914,
//            0.0028532583713449023,
//            0.0021661619284405543,
//            0.000983488742433437,
//            -0.0002109776394338537,
//            -0.00102243880958648,
//            -0.0012781925202740552,
//            -0.0010556999747668027,
//            -0.0006071982633349518,
//            -0.0002190843245672073,
//            -0.0000765909881856171,
//            -0.00018685087359959334,
//            -0.00039385613517151715,
//            -0.0004705004121502642,
//            -0.0002451817699909521,
//            0.0002989313920534134,
//            0.0009963200578850073,
//            0.0015570990661126862,
//            0.001690840848755636,
//            0.0012391019024097277,
//            0.0002627433894540386,
//            -0.0009560988627864729,
//            -0.002006573777017951,
//            -0.0024974438088376,
//            -0.0022087209062284572,
//            -0.0011857247608698855,
//            0.00026541577015291764,
//            0.0016768106021425421,
//            0.002582792841958248,
//            0.002682311030778653,
//            0.0019461430370155855,
//            0.0006235872914491847,
//            -0.000846684387289647,
//            -0.0019919023265108755,
//            -0.0024667261814993275,
//            -0.0021637538617319874,
//            -0.0012357587238414635,
//            -0.000026757510223180513,
//            0.00105910921599182,
//            0.001699083307324825,
//            0.001752404478642071,
//            0.001287623974282757,
//            0.0005335011691642524,
//            -0.00022238992280845446,
//            -0.0007433401231304142,
//            -0.0009197198884204166,
//            -0.0007869837883128509,
//            -0.0004852901808337252,
//            -0.00018298583002623382,
//            1.3822287392501355e-7,
//            0.000037198036555715424,
//            -0.000008831746756390828,
//            -0.00003071773973466897,
//            0.00005881402846852399,
//            0.00027496817512132976,
//            0.0005456204181639188,
//            0.0007395571313473856,
//            0.0007267547019453327,
//            0.0004436461653756917,
//            -0.00006592713688065847,
//            -0.0006540270735462815,
//            -0.0011162581419848913,
//            -0.001269622410293214,
//            -0.0010244224162697024,
//            -0.0004288197721409871,
//            0.0003422529850008471,
//            0.0010408429902583319,
//            0.0014350461974589567,
//            0.0013890981881240065,
//            0.00091323676189585,
//            0.0001615545093905034,
//            -0.000623627284201034,
//            -0.0011934897060061182,
//            -0.0013778103932618135,
//            -0.0011395192441272161,
//            -0.0005788585139393141,
//            0.00010699843517431307,
//            0.0006966204118325681,
//            0.0010201344145137666,
//            0.0010099801504875516,
//            0.0007126136214554886,
//            0.0002597813205274284,
//            -0.00018664871079828043,
//            -0.0004947603688851048,
//            -0.0006012581896684013,
//            -0.0005222552642551832,
//            -0.00033220710166389833,
//            -0.00012423154091086147,
//            0.000030325144955778932,
//            0.00010517898215610903,
//            0.00011980987255970673,
//            0.00011919005696696207,
//            0.00014349483310272687,
//            0.00020336278055405315,
//            0.0002728733322721684,
//            0.00030202009987148056,
//            0.0002431153813814889,
//            0.00007872921156710085,
//            -0.00016181324091414838,
//            -0.00040698920894111416,
//            -0.0005673346165428243,
//            -0.0005705625019665242,
//            -0.0003927256190271021,
//            -0.00007305833253835333,
//            0.00029467680875443924,
//            0.000592673988726387,
//            0.0007203294521295929,
//            0.0006306635652729166,
//            0.0003477965804636901,
//            -0.00004002007793247288,
//            -0.0004103307964427278,
//            -0.0006481176495440134,
//            -0.0006841431783946526,
//            -0.0005164591813888314,
//            -0.00020835389924708913,
//            0.00013745939763979843,
//            0.0004125894823932648,
//            0.0005432379934728779,
//            0.0005035764764332631,
//            0.0003303898473400247,
//            0.00008942021117865239,
//            -0.00013535387740428386,
//            -0.00028322383360896005,
//            -0.00032878427701042956,
//            -0.0002805819614645613,
//            -0.0001780282739689821,
//            -0.00006615601475404215,
//            0.000023380824720684326,
//            0.00007683201947845456,
//            0.00010045737604001056,
//            0.00011233310405470648,
//            0.00012579301000881072,
//            0.00014024346928456796,
//            0.0001436128322417263,
//            0.00011847986350896068,
//            0.00005196156724933137,
//            -0.00005183701979994594,
//            -0.00016773149887306768,
//            -0.00025680413968038555,
//            -0.0002822089432665181,
//            -0.00022389129765937687,
//            -0.00008925748593724338,
//            0.00008556174789812694,
//            0.00024543256514645965,
//            0.0003358998729595603,
//            0.00032401668821481407,
//            0.00021134864891063747,
//            0.00003397321268575746,
//            -0.0001496466604337355,
//            -0.0002791948650394581,
//            -0.00031412089318130673,
//            -0.0002485547057649874,
//            -0.00011247426954022668,
//            0.00004092759104733265,
//            0.0001573310048911618,
//            0.0002021299247703393,
//            0.00017261792609819324,
//            0.00009614920165594607,
//            0.00001618351083033616,
//            -0.00002875450783071476,
//            -0.00002385968303622565,
//            0.000014027952266070876,
//            0.00004335182192666706,
//            0.00001922185361879358,
//            -0.00007996970716594466,
//            -0.00023145361324779893,
//            -0.00036254255699631483,
//            -0.0003654573793365161,
//            -0.00012898694383818137,
//            0.0004221512756766677,
//            0.0012810575794213327,
//            0.0020659996014877747,
//            -0.0034792758495768177,
//            0.0001706067140866618
//        }; // </editor-fold>

        
        for(int i = N; i<Y.count(); i++){
            filtered_bands[k][i]=0;
            for(int j = 0; j<filter.count(); j++){
                if((i-j)>=0){
                    filtered_bands[k][i-N]+=filter[j]*Y[i-j];
                }
            }
        }
        
        QVector<double> RMS;
        RMS.resize(filtered_bands[k].count());
        //Step 2: For each frequency band, compute the RMS
        int Nk = (int)1000/((F2_vec[k]-F1_vec[k])/2);
        //double Nk = 1;
        for(int i = 0; i<filtered_bands[k].count(); i++){
            double sum = 0;
            for(int j = -2*Nk;j<=2*Nk;j++){
            //for(int j = 0; j<1; j++){
                if((i-j)>=0 && (i-j)<filtered_bands[k].count()){
                        sum += pow(filtered_bands[k][i-j],2);
                }
            }
            RMS[i] = sqrt(1/(4*(double)(Nk) +1)*sum);
        }
        
        //Step 3: Compute the moving background level
        double Nb = 30*1000;//30: defined on paper, 1000: sample freq.
        double c = 2.5;
        
        QVector<double> Bk,Z_k;
        Bk.resize(Y.count());
        Z_k.resize(Y.count());
        
//        for(int i = 0; i<20; i++){
//            Bk[0]=1;    
//        }
        
//        Bk[0]=RMS[0]/c;
        Bk[0]=3*RMS[0]/c;
        
        for(int i = 1; i<RMS.count(); i++){
            if((i-2*Nk-Nb)>=1){
                Bk[i]=Bk[i-1]+1/Nb*(Z_k[i-2*Nk]-Z_k[i-2*Nk-Nb]);
            }else if((i-2*Nk)>=0){
                Bk[i]=Bk[i-1]+1/Nb*(Z_k[i-2*Nk]);
            }else{
                Bk[i]=Bk[i-1];
                //Bk[i]=RMS[i]/Nb;
            }
            if(RMS[i]<=c*Bk[i]){
                Z_k[i]=RMS[i];
            }else{
                Z_k[i]=c*Bk[i];
            }
        }
        
        FILE *detect, *RMS_Bk;
        detect = fopen("C:/Users/Fabricio/Desktop/vixi/detect.txt","w");
        RMS_Bk = fopen("C:/Users/Fabricio/Desktop/vixi/RMS_Bk.txt","w");
        //Step 4: Compares filtered_bands with background
        for(int i = 0; i<RMS.count(); i++){
            if(RMS[i]>=c*Bk[i]){
                dk[k][i]=1;
            }else{
                dk[k][i]=0;
            }
//            printf("RMS = %f   c*Bk = %f\n", RMS[i], c*Bk[i]);
//            Write Files with HFO detections
            fprintf(detect, "%f\n", dk[k][i]);
            fprintf(RMS_Bk, "%f %f\n", RMS[i], c*Bk[i]);
        }
    }

    //Sets results as a region containing the detected HFOs
    int M = 0; //interval arround detection used
    int detections = 0;
    //1st result: first filtered signal (0-60 Hz)
    for(int i = 0; i<Y.count(); i++){
        result[n_results][0][i] = i;
        result[n_results][1][i] = Y[i];
//        result[n_results][1][i] = filtered1[i];
    }
    n_results++; //for each result added, n_results is incremented by 1
    //2nd result: broad band signal (80-300Hz)
    for(int i = 0; i<Y.count(); i++){
        result[n_results][0][i] = i;
        result[n_results][1][i] = filtered[i];
    }
    n_results++;
    //Next n_bands results: detections for each freq. band
    for(int k = 0; k<n_bands; k++){
        int counter = 0;
        for(int i = 0; i<dk[k].count();i++){
            result[n_results][0][i] = i;
            if(dk[k][i]==1){
                counter++;
            }else{
                if(counter>=(50)){
                    for(int j = (i-counter-M); j<(i+M); j++){
                        if(j>=0 && j<filtered_bands[k].count()){
                                result[n_results][1][j] = filtered_bands[k][j];
                                //result[n_results][1][j] = dk[k][j];
                        }
                    }
                    detections++;
                }
                counter = 0;
            }
        }
        n_results++;
        //printf("number of detections in %dº range: %d\n", k, detections);
    }
    //Last result: total number of detections on this ch.
    for(int i = 0; i<2; i++){
        result[n_results][0][i]=i;
        result[n_results][1][i]=detections;
    }
    n_results++;
    return result;
}

 Q_EXPORT_PLUGIN2(method_hfo, HFO_detector1)